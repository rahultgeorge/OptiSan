diff --git a/compiler-rt/lib/asan/asan_allocator.cpp b/compiler-rt/lib/asan/asan_allocator.cpp
index 65c51fbafdd0..1f02938f6cee 100644
--- a/compiler-rt/lib/asan/asan_allocator.cpp
+++ b/compiler-rt/lib/asan/asan_allocator.cpp
@@ -549,7 +549,7 @@ struct Allocator {
     void *res = reinterpret_cast<void *>(user_beg);
     if (can_fill && fl.max_malloc_fill_size) {
       uptr fill_size = Min(size, (uptr)fl.max_malloc_fill_size);
-      REAL(memset)(res, fl.malloc_fill_byte, fill_size);
+      memset(res, fl.malloc_fill_byte, fill_size);
     }
 #if CAN_SANITIZE_LEAKS
     m->lsan_tag = __lsan::DisabledInThisThread() ? __lsan::kIgnored
@@ -596,7 +596,7 @@ struct Allocator {
       if (m->UsedSize() >= kChunkHeader2Size) {  // Skip Header2 in user area.
         uptr size_to_fill = m->UsedSize() - kChunkHeader2Size;
         size_to_fill = Min(size_to_fill, (uptr)fl.max_free_fill_size);
-        REAL(memset)((void *)scribble_start, fl.free_fill_byte, size_to_fill);
+        memset((void *)scribble_start, fl.free_fill_byte, size_to_fill);
       }
     }
 
@@ -679,11 +679,11 @@ struct Allocator {
       u8 chunk_state = m->chunk_state;
       if (chunk_state != CHUNK_ALLOCATED)
         ReportInvalidFree(old_ptr, chunk_state, stack);
-      CHECK_NE(REAL(memcpy), nullptr);
+      //CHECK_NE(REAL(memcpy), nullptr);
       uptr memcpy_size = Min(new_size, m->UsedSize());
       // If realloc() races with free(), we may start copying freed memory.
       // However, we will report racy double-free later anyway.
-      REAL(memcpy)(new_ptr, old_ptr, memcpy_size);
+      memcpy(new_ptr, old_ptr, memcpy_size);
       Deallocate(old_ptr, 0, 0, stack, FROM_MALLOC);
     }
     return new_ptr;
@@ -699,7 +699,7 @@ struct Allocator {
     // If the memory comes from the secondary allocator no need to clear it
     // as it comes directly from mmap.
     if (ptr && allocator.FromPrimary(ptr))
-      REAL(memset)(ptr, 0, nmemb * size);
+      memset(ptr, 0, nmemb * size);
     return ptr;
   }
 
diff --git a/compiler-rt/lib/asan/asan_fake_stack.cpp b/compiler-rt/lib/asan/asan_fake_stack.cpp
index 295e6debc96c..6cf9e6e0b411 100644
--- a/compiler-rt/lib/asan/asan_fake_stack.cpp
+++ b/compiler-rt/lib/asan/asan_fake_stack.cpp
@@ -276,7 +276,7 @@ void __asan_alloca_poison(uptr addr, uptr size) {
 SANITIZER_INTERFACE_ATTRIBUTE
 void __asan_allocas_unpoison(uptr top, uptr bottom) {
   if ((!top) || (top > bottom)) return;
-  REAL(memset)(reinterpret_cast<void*>(MemToShadow(top)), 0,
+  memset(reinterpret_cast<void*>(MemToShadow(top)), 0,
                (bottom - top) / SHADOW_GRANULARITY);
 }
 } // extern "C"
diff --git a/compiler-rt/lib/asan/asan_interceptors.cpp b/compiler-rt/lib/asan/asan_interceptors.cpp
index b19cf25c7cd0..b78a0d9a7052 100644
--- a/compiler-rt/lib/asan/asan_interceptors.cpp
+++ b/compiler-rt/lib/asan/asan_interceptors.cpp
@@ -146,6 +146,7 @@ DECLARE_REAL_AND_INTERCEPTOR(void, free, void *)
     *begin = *end = 0;                                                         \
   }
 
+/*
 #define COMMON_INTERCEPTOR_MEMMOVE_IMPL(ctx, to, from, size) \
   do {                                                       \
     ASAN_INTERCEPTOR_ENTER(ctx, memmove);                    \
@@ -163,7 +164,7 @@ DECLARE_REAL_AND_INTERCEPTOR(void, free, void *)
     ASAN_INTERCEPTOR_ENTER(ctx, memset);                    \
     ASAN_MEMSET_IMPL(ctx, block, c, size);                  \
   } while (false)
-
+*/
 #if CAN_SANITIZE_LEAKS
 #define COMMON_INTERCEPTOR_STRERROR()                       \
   __lsan::ScopedInterceptorDisabler disabler
@@ -205,6 +206,7 @@ static thread_return_t THREAD_CALLING_CONV asan_thread_start(void *arg) {
   return t->ThreadStart(GetTid(), &param->is_registered);
 }
 
+/*
 INTERCEPTOR(int, pthread_create, void *thread,
     void *attr, void *(*start_routine)(void*), void *arg) {
   EnsureMainThreadIDIsCorrect();
@@ -249,7 +251,7 @@ INTERCEPTOR(int, pthread_create, void *thread,
 INTERCEPTOR(int, pthread_join, void *t, void **arg) {
   return real_pthread_join(t, arg);
 }
-
+*/
 DEFINE_REAL_PTHREAD_FUNCTIONS
 #endif  // ASAN_INTERCEPT_PTHREAD_CREATE
 
@@ -265,7 +267,7 @@ static void ClearShadowMemoryForContextStack(uptr stack, uptr ssize) {
     PoisonShadow(bottom, ssize, 0);
   }
 }
-
+/*
 INTERCEPTOR(int, swapcontext, struct ucontext_t *oucp,
             struct ucontext_t *ucp) {
   static bool reported_warning = false;
@@ -295,6 +297,7 @@ INTERCEPTOR(int, swapcontext, struct ucontext_t *oucp,
   ClearShadowMemoryForContextStack(stack, ssize);
   return res;
 }
+*/
 #endif  // ASAN_INTERCEPT_SWAPCONTEXT
 
 #if SANITIZER_NETBSD
@@ -302,6 +305,7 @@ INTERCEPTOR(int, swapcontext, struct ucontext_t *oucp,
 #define siglongjmp __siglongjmp14
 #endif
 
+/*
 INTERCEPTOR(void, longjmp, void *env, int val) {
   __asan_handle_no_return();
   REAL(longjmp)(env, val);
@@ -565,6 +569,8 @@ INTERCEPTOR(long long, atoll, const char *nptr) {
 }
 #endif  // ASAN_INTERCEPT_ATOLL_AND_STRTOLL
 
+
+
 #if ASAN_INTERCEPT___CXA_ATEXIT || ASAN_INTERCEPT_ATEXIT
 static void AtCxaAtexit(void *unused) {
   (void)unused;
@@ -622,6 +628,7 @@ INTERCEPTOR(int, pthread_atfork, void (*prepare)(), void (*parent)(),
 DEFINE_REAL(int, vfork)
 DECLARE_EXTERN_INTERCEPTOR_AND_WRAPPER(int, vfork)
 #endif
+*/
 
 // ---------------------- InitializeAsanInterceptors ---------------- {{{1
 namespace __asan {
@@ -633,7 +640,7 @@ void InitializeAsanInterceptors() {
   InitializeSignalInterceptors();
 
   // Intercept str* functions.
-  ASAN_INTERCEPT_FUNC(strcat);
+/*  ASAN_INTERCEPT_FUNC(strcat);
   ASAN_INTERCEPT_FUNC(strcpy);
   ASAN_INTERCEPT_FUNC(strncat);
   ASAN_INTERCEPT_FUNC(strncpy);
@@ -653,6 +660,7 @@ void InitializeAsanInterceptors() {
   ASAN_INTERCEPT_FUNC(strtoll);
 #endif
 
+
   // Intecept jump-related functions.
   ASAN_INTERCEPT_FUNC(longjmp);
 
@@ -711,6 +719,7 @@ void InitializeAsanInterceptors() {
 #if ASAN_INTERCEPT_VFORK
   ASAN_INTERCEPT_FUNC(vfork);
 #endif
+*/
 
   InitializePlatformInterceptors();
 
diff --git a/compiler-rt/lib/asan/asan_interceptors.h b/compiler-rt/lib/asan/asan_interceptors.h
index 344a64bd83d3..a210176df700 100644
--- a/compiler-rt/lib/asan/asan_interceptors.h
+++ b/compiler-rt/lib/asan/asan_interceptors.h
@@ -17,6 +17,8 @@
 #include "asan_interceptors_memintrinsics.h"
 #include "interception/interception.h"
 #include "sanitizer_common/sanitizer_platform_interceptors.h"
+//Added to include real memset etc
+#include <string.h>
 
 namespace __asan {
 
diff --git a/compiler-rt/lib/asan/asan_interceptors_memintrinsics.h b/compiler-rt/lib/asan/asan_interceptors_memintrinsics.h
index 632f0515a9eb..ee17b66de452 100644
--- a/compiler-rt/lib/asan/asan_interceptors_memintrinsics.h
+++ b/compiler-rt/lib/asan/asan_interceptors_memintrinsics.h
@@ -17,7 +17,7 @@
 #include "asan_internal.h"
 #include "asan_mapping.h"
 #include "interception/interception.h"
-
+#include <string.h>
 DECLARE_REAL(void*, memcpy, void *to, const void *from, uptr size)
 DECLARE_REAL(void*, memset, void *block, int c, uptr size)
 
@@ -82,7 +82,7 @@ struct AsanInterceptorContext {
   do {                                                                  \
     if (UNLIKELY(!asan_inited)) return internal_memcpy(to, from, size); \
     if (asan_init_is_running) {                                         \
-      return REAL(memcpy)(to, from, size);                              \
+      return memcpy(to, from, size);                              \
     }                                                                   \
     ENSURE_ASAN_INITED();                                               \
     if (flags()->replace_intrin) {                                      \
@@ -92,7 +92,7 @@ struct AsanInterceptorContext {
       ASAN_READ_RANGE(ctx, from, size);                                 \
       ASAN_WRITE_RANGE(ctx, to, size);                                  \
     }                                                                   \
-    return REAL(memcpy)(to, from, size);                                \
+    return memcpy(to, from, size);                                \
   } while (0)
 
 // memset is called inside Printf.
@@ -100,13 +100,13 @@ struct AsanInterceptorContext {
   do {                                                                  \
     if (UNLIKELY(!asan_inited)) return internal_memset(block, c, size); \
     if (asan_init_is_running) {                                         \
-      return REAL(memset)(block, c, size);                              \
+      return memset(block, c, size);                              \
     }                                                                   \
     ENSURE_ASAN_INITED();                                               \
     if (flags()->replace_intrin) {                                      \
       ASAN_WRITE_RANGE(ctx, block, size);                               \
     }                                                                   \
-    return REAL(memset)(block, c, size);                                \
+    return memset(block, c, size);                                \
   } while (0)
 
 #define ASAN_MEMMOVE_IMPL(ctx, to, from, size)                           \
diff --git a/compiler-rt/lib/asan/asan_malloc_linux.cpp b/compiler-rt/lib/asan/asan_malloc_linux.cpp
index faa8968a5d00..dce68459a208 100644
--- a/compiler-rt/lib/asan/asan_malloc_linux.cpp
+++ b/compiler-rt/lib/asan/asan_malloc_linux.cpp
@@ -119,6 +119,8 @@ static void *ReallocFromLocalPool(void *ptr, uptr size) {
   return new_ptr;
 }
 
+// Start comment here - heap interceptors
+/*
 INTERCEPTOR(void, free, void *ptr) {
   GET_STACK_TRACE_FREE;
   if (UNLIKELY(IsInDlsymAllocPool(ptr))) {
@@ -165,6 +167,8 @@ INTERCEPTOR(void*, realloc, void *ptr, uptr size) {
   return asan_realloc(ptr, size, &stack);
 }
 
+
+
 #if SANITIZER_INTERCEPT_REALLOCARRAY
 INTERCEPTOR(void*, reallocarray, void *ptr, uptr nmemb, uptr size) {
   ENSURE_ASAN_INITED();
@@ -242,6 +246,8 @@ INTERCEPTOR(void*, pvalloc, uptr size) {
 INTERCEPTOR(void, malloc_stats, void) {
   __asan_print_accumulated_stats();
 }
+*/
+// End comment here
 
 #if SANITIZER_ANDROID
 // Format of __libc_malloc_dispatch has changed in Android L.
diff --git a/compiler-rt/lib/asan/asan_poisoning.cpp b/compiler-rt/lib/asan/asan_poisoning.cpp
index f3fbe684e2cb..6895f6fd6f07 100644
--- a/compiler-rt/lib/asan/asan_poisoning.cpp
+++ b/compiler-rt/lib/asan/asan_poisoning.cpp
@@ -36,7 +36,7 @@ void PoisonShadow(uptr addr, uptr size, u8 value) {
   CHECK(AddrIsInMem(addr));
   CHECK(AddrIsAlignedByGranularity(addr + size));
   CHECK(AddrIsInMem(addr + size - SHADOW_GRANULARITY));
-  CHECK(REAL(memset));
+  //CHECK(REAL(memset));
   FastPoisonShadow(addr, size, value);
 }
 
@@ -137,7 +137,7 @@ void __asan_poison_memory_region(void const volatile *addr, uptr size) {
     }
     beg.chunk++;
   }
-  REAL(memset)(beg.chunk, kAsanUserPoisonedMemoryMagic, end.chunk - beg.chunk);
+  memset(beg.chunk, kAsanUserPoisonedMemoryMagic, end.chunk - beg.chunk);
   // Poison if byte in end.offset is unaddressable.
   if (end.value > 0 && end.value <= end.offset) {
     *end.chunk = kAsanUserPoisonedMemoryMagic;
@@ -168,7 +168,7 @@ void __asan_unpoison_memory_region(void const volatile *addr, uptr size) {
     *beg.chunk = 0;
     beg.chunk++;
   }
-  REAL(memset)(beg.chunk, 0, end.chunk - beg.chunk);
+  memset(beg.chunk, 0, end.chunk - beg.chunk);
   if (end.offset > 0 && end.value != 0) {
     *end.chunk = Max(end.value, end.offset);
   }
@@ -318,27 +318,27 @@ static void PoisonAlignedStackMemory(uptr addr, uptr size, bool do_poison) {
 }
 
 void __asan_set_shadow_00(uptr addr, uptr size) {
-  REAL(memset)((void *)addr, 0, size);
+  memset((void *)addr, 0, size);
 }
 
 void __asan_set_shadow_f1(uptr addr, uptr size) {
-  REAL(memset)((void *)addr, 0xf1, size);
+  memset((void *)addr, 0xf1, size);
 }
 
 void __asan_set_shadow_f2(uptr addr, uptr size) {
-  REAL(memset)((void *)addr, 0xf2, size);
+  memset((void *)addr, 0xf2, size);
 }
 
 void __asan_set_shadow_f3(uptr addr, uptr size) {
-  REAL(memset)((void *)addr, 0xf3, size);
+  memset((void *)addr, 0xf3, size);
 }
 
 void __asan_set_shadow_f5(uptr addr, uptr size) {
-  REAL(memset)((void *)addr, 0xf5, size);
+  memset((void *)addr, 0xf5, size);
 }
 
 void __asan_set_shadow_f8(uptr addr, uptr size) {
-  REAL(memset)((void *)addr, 0xf8, size);
+  memset((void *)addr, 0xf8, size);
 }
 
 void __asan_poison_stack_memory(uptr addr, uptr size) {
diff --git a/compiler-rt/lib/asan/asan_poisoning.h b/compiler-rt/lib/asan/asan_poisoning.h
index 62dd9bd0edd3..3cf7cad41b8b 100644
--- a/compiler-rt/lib/asan/asan_poisoning.h
+++ b/compiler-rt/lib/asan/asan_poisoning.h
@@ -55,20 +55,20 @@ ALWAYS_INLINE void FastPoisonShadow(uptr aligned_beg, uptr aligned_size,
       // them, so default to memset.
       SANITIZER_RTEMS == 1 ||
       shadow_end - shadow_beg < common_flags()->clear_shadow_mmap_threshold) {
-    REAL(memset)((void*)shadow_beg, value, shadow_end - shadow_beg);
+    memset((void*)shadow_beg, value, shadow_end - shadow_beg);
   } else {
     uptr page_size = GetPageSizeCached();
     uptr page_beg = RoundUpTo(shadow_beg, page_size);
     uptr page_end = RoundDownTo(shadow_end, page_size);
 
     if (page_beg >= page_end) {
-      REAL(memset)((void *)shadow_beg, 0, shadow_end - shadow_beg);
+      memset((void *)shadow_beg, 0, shadow_end - shadow_beg);
     } else {
       if (page_beg != shadow_beg) {
-        REAL(memset)((void *)shadow_beg, 0, page_beg - shadow_beg);
+        memset((void *)shadow_beg, 0, page_beg - shadow_beg);
       }
       if (page_end != shadow_end) {
-        REAL(memset)((void *)page_end, 0, shadow_end - page_end);
+        memset((void *)page_end, 0, shadow_end - page_end);
       }
       ReserveShadowMemoryRange(page_beg, page_end - 1, nullptr);
     }
diff --git a/compiler-rt/lib/asan/asan_posix.cpp b/compiler-rt/lib/asan/asan_posix.cpp
index 920d216624a3..6ab7fd5e470c 100644
--- a/compiler-rt/lib/asan/asan_posix.cpp
+++ b/compiler-rt/lib/asan/asan_posix.cpp
@@ -93,12 +93,12 @@ void AsanTSDInit(void (*destructor)(void *tsd)) {
 }
 
 void *AsanTSDGet() {
-  CHECK(tsd_key_inited);
+  //CHECK(tsd_key_inited);
   return pthread_getspecific(tsd_key);
 }
 
 void AsanTSDSet(void *tsd) {
-  CHECK(tsd_key_inited);
+//  CHECK(tsd_key_inited);
   pthread_setspecific(tsd_key, tsd);
 }
 
diff --git a/compiler-rt/lib/asan/asan_stats.cpp b/compiler-rt/lib/asan/asan_stats.cpp
index 00ded8f5ef50..803f1f89d3c9 100644
--- a/compiler-rt/lib/asan/asan_stats.cpp
+++ b/compiler-rt/lib/asan/asan_stats.cpp
@@ -25,8 +25,8 @@ AsanStats::AsanStats() {
 }
 
 void AsanStats::Clear() {
-  CHECK(REAL(memset));
-  REAL(memset)(this, 0, sizeof(AsanStats));
+  //CHECK(REAL(memset));
+  memset(this, 0, sizeof(AsanStats));
 }
 
 static void PrintMallocStatsArray(const char *prefix,
diff --git a/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc b/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc
index 2a4ab7e67a5c..eb30c44610de 100644
--- a/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc
+++ b/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc
@@ -360,6 +360,7 @@ UNUSED static void DeleteInterceptorMetadata(void *addr) {
 }
 #endif  // SI_POSIX
 
+/*
 #if SANITIZER_INTERCEPT_STRLEN
 INTERCEPTOR(SIZE_T, strlen, const char *s) {
   // Sometimes strlen is called prior to InitializeCommonInterceptors,
@@ -394,6 +395,7 @@ INTERCEPTOR(SIZE_T, strnlen, const char *s, SIZE_T maxlen) {
 #define INIT_STRNLEN
 #endif
 
+
 #if SANITIZER_INTERCEPT_STRNDUP
 INTERCEPTOR(char*, strndup, const char *s, uptr size) {
   void *ctx;
@@ -430,6 +432,7 @@ INTERCEPTOR(char*, textdomain, const char *domainname) {
 #define INIT_TEXTDOMAIN
 #endif
 
+
 #if SANITIZER_INTERCEPT_STRCMP
 static inline int CharCmpX(unsigned char c1, unsigned char c2) {
   return (c1 == c2) ? 0 : (c1 < c2) ? -1 : 1;
@@ -3598,6 +3601,7 @@ INTERCEPTOR(int, tcgetattr, int fd, void *termios_p) {
 #define INIT_TCGETATTR
 #endif
 
+
 #if SANITIZER_INTERCEPT_REALPATH
 INTERCEPTOR(char *, realpath, const char *path, char *resolved_path) {
   void *ctx;
@@ -9733,30 +9737,35 @@ INTERCEPTOR(void, qsort_r, void *base, SIZE_T nmemb, SIZE_T size,
 
 #include "sanitizer_common_interceptors_netbsd_compat.inc"
 
+End comment to disable all common interceptors
+*/
+
 static void InitializeCommonInterceptors() {
 #if SI_POSIX
   static u64 metadata_mem[sizeof(MetadataHashMap) / sizeof(u64) + 1];
   interceptor_metadata_map = new ((void *)&metadata_mem) MetadataHashMap();
 #endif
 
+
+/*
   INIT_MMAP;
   INIT_MMAP64;
-  INIT_TEXTDOMAIN;
+  //INIT_TEXTDOMAIN;
   INIT_STRLEN;
   INIT_STRNLEN;
-  INIT_STRNDUP;
-  INIT___STRNDUP;
-  INIT_STRCMP;
+ // INIT_STRNDUP;
+ // INIT___STRNDUP;
+ // INIT_STRCMP;
   INIT_STRNCMP;
-  INIT_STRCASECMP;
-  INIT_STRNCASECMP;
-  INIT_STRSTR;
-  INIT_STRCASESTR;
+  //INIT_STRCASECMP;
+  //INIT_STRNCASECMP;
+  //INIT_STRSTR;
+  //INIT_STRCASESTR;
   INIT_STRCHR;
   INIT_STRCHRNUL;
   INIT_STRRCHR;
   INIT_STRSPN;
-  INIT_STRTOK;
+//  INIT_STRTOK;
   INIT_STRPBRK;
   INIT_STRXFRM;
   INIT___STRXFRM_L;
@@ -9848,7 +9857,7 @@ static void InitializeCommonInterceptors() {
   INIT_WCRTOMB;
   INIT_WCTOMB;
   INIT_TCGETATTR;
-  INIT_REALPATH;
+  //INIT_REALPATH;
   INIT_CANONICALIZE_FILE_NAME;
   INIT_CONFSTR;
   INIT_SCHED_GETAFFINITY;
@@ -10038,4 +10047,5 @@ static void InitializeCommonInterceptors() {
   INIT_QSORT_R;
 
   INIT___PRINTF_CHK;
+  */
 }
